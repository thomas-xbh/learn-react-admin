{
  "compilerOptions": {
    "target": "ESNext", // 编译后代码的目标版本，ES2020指的是2020年的更新的版本，ESNext指的是最新的版本
    "module": "ESNext", // 使用的模块系统类型
    "lib": ["ESNext", "DOM", "DOM.Iterable"], //要包含的库文件，DOM，DOM.Iterable和ESNext库文件是TypeScript开发中比较基础的依赖
    "useDefineForClassFields": true,
    "skipLibCheck": true, //跳过编译器对引入库文件的检查，以加快构建速度
    "allowJs": true, //允许编译JS文件

    /* Bundler mode */
    "moduleResolution": "bundler",
    "sourceMap": true, // 输出*.map文件提供源码映射
    "declaration": true, //生成声明文件 （.d.ts）
    "preserveWatchOutput": true, //改选项允许在监视模式下保留先前编译的文件，从而避免增量编译时删除更改的文件导致的重新编译
    "removeComments": true, //移除注释，可以提高编译速度并减小生成文件的大小
    "allowImportingTsExtensions": true, //允许import导入语句中导入.ts或.tsx扩展名的模块，而不需要显式的指定扩展名
    "resolveJsonModule": true, //允许导入JSON模块
    "isolatedModules": true, //让typeScript处理每个文件时都是独立的模块（可加快编译速度）
    "noEmit": true, //编译器不生成任何js文件
    "jsx": "react-jsx",
    "esModuleInterop": true,
    /*
    使TypeScript更好的与CommonJS模块兼容，在使用CommonJS模块系统时，导出的模块会被包装在一个对象中，这是因为CommonJS使用的是
    类似于modules.export的语法来导出模块。而某些工具和库可能需要以ES6模块的方式导入这些CommonJS模块，这时候就可以开启
    esModuleInterop选项，开启后，在导入CommonJS模块时不需要再使用默认导出才能正确引入，也不需要手动处理require()和module.exports。
    这使得导入和使用CommonJS模块的过程变得更加简洁方便。
    */

    /* Linting */
    "strict": true, //启用所有严格类型检查选项
    "strictNullChecks": true, //对空值进行严格检查
    "noImplicitAny": true, //禁止隐式any类型
    "noUnusedLocals": true, //消除未使用变量产生的警告
    "noUnusedParameters": true, //消除未使用参数产生的警告
    "noFallthroughCasesInSwitch": true, //避免switch语句掉入陷阱
    "useUnknownInCatchVariables": false, //为true时，catch中声明的变量类型会被认为是unknown，而非默认的any
    "types": ["vite/client"],
    "baseUrl": ".",
    /* alias */
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["types/*"],
    }
  },
  "include": ["src", "types"],
  "exclude": ["node_modules", "dist"]
}
